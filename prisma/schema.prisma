// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "linux-musl"]
  output        = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model user {
  id        String   @id @default(cuid()) @map("_id")
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EventType {
  EVENT
  RECOGNITION
  TEAM
}

enum MembershipStatus {
  APPROVED
  DENIED
  PENDING
}

model Event {
  id                 String      @id @default(cuid()) @map("_id")
  type               EventType
  title              String      @unique
  time               String
  date               DateTime
  location           String
  address            String
  description        String
  ceus               Int
  image              String
  ytLink             String?
  expected_attendees Int
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  isFinished         Boolean     @default(false)
  isLatest           Boolean     @default(false)
  EventUser          EventUser[]
}

model Member {
  id                String           @id @default(cuid()) @map("_id")
  fullName          String
  email             String           @unique
  phoneNumber       String?          @unique
  membershipStatus  MembershipStatus
  EventUser         EventUser[]
  nominationsMade   Nomination[]     @relation("Nominator")
  firstNominations  Nomination[]     @relation("FirstNominee")
  secondNominations Nomination[]     @relation("SecondNominee")
  thirdNominations  Nomination[]     @relation("ThirdNominee")
}

model NonMember {
  id          String      @id @default(cuid()) @map("_id")
  fullName    String
  email       String      @unique
  phoneNumber String?     @unique
  EventUser   EventUser[]
}

model VerificationCode {
  id        String   @id @default(cuid()) @map("_id")
  email     String
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
}

model EventUser {
  id          String     @id @default(cuid()) @map("_id")
  member      Member?    @relation(fields: [memberId], references: [id])
  memberId    String?
  nonMember   NonMember? @relation(fields: [nonMemberId], references: [id])
  nonMemberId String?
  event       Event      @relation(fields: [eventId], references: [id])
  eventId     String
  isPending   Boolean    @default(false)
  rejected    Boolean    @default(false)
}

model Nomination {
  id          String   @id @default(cuid()) @map("_id")
  nominatorId String
  nominee1Id  String
  nominee2Id  String?
  nominee3Id  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    String
  reason      String
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED

  nominator Member  @relation("Nominator", fields: [nominatorId], references: [id])
  nominee1  Member  @relation("FirstNominee", fields: [nominee1Id], references: [id])
  nominee2  Member? @relation("SecondNominee", fields: [nominee2Id], references: [id])
  nominee3  Member? @relation("ThirdNominee", fields: [nominee3Id], references: [id])

  @@index([nominatorId])
  @@index([nominee1Id])
  @@index([nominee2Id])
  @@index([nominee3Id])
}

model PDFFile {
  id        String   @id @default(cuid()) @map("_id")
  name      String
  fileUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Luminance {
  id        String   @id @default(cuid()) @map("_id")
  name      String   @unique
  fileUrl   String
  isCurrent Boolean  @default(false)
  createdAt DateTime @default(now())
}
