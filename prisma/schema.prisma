// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "linux-musl"]
  output        = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model user {
  id        String   @id @default(cuid()) @map("_id")
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EventType {
  EVENT
  RECOGNITION
  TEAM
}

enum MembershipStatus {
  APPROVED
  DENIED
  PENDING
}

model Event {
  id                 String      @id @default(cuid()) @map("_id")
  type               EventType
  title              String      @unique
  time               String
  date               DateTime
  location           String
  address            String
  description        String
  ceus               Int
  image              String
  ytLink             String?
  zeffyRegisterLink  String?
  expected_attendees Int
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  isFinished         Boolean     @default(false)
  isLatest           Boolean     @default(false)
  EventUser          EventUser[]
}

model Member {
  id                  String           @id @default(cuid()) @map("_id")
  fullName            String
  email               String           @unique
  phoneNumber         String?          @unique
  membershipStatus    MembershipStatus
  EventUser           EventUser[]
  nominationsMade     Nomination[]     @relation("Nominator")
  nominationsReceived Nomination[]     @relation("Nominee")
  receivedVotes       Vote[] // For voting system
}

model NonMember {
  id          String      @id @default(cuid()) @map("_id")
  fullName    String
  email       String      @unique
  phoneNumber String?     @unique
  EventUser   EventUser[]
}

model VerificationCode {
  id        String   @id @default(cuid()) @map("_id")
  email     String
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
}

model EventUser {
  id          String     @id @default(cuid()) @map("_id")
  member      Member?    @relation(fields: [memberId], references: [id])
  memberId    String?
  nonMember   NonMember? @relation(fields: [nonMemberId], references: [id])
  nonMemberId String?
  event       Event      @relation(fields: [eventId], references: [id])
  eventId     String
  isPending   Boolean    @default(false)
  rejected    Boolean    @default(false)
}

model NominationSettings {
  id                  String    @id @default(cuid()) @map("_id")
  year                Int       @unique
  isNominationOpen    Boolean   @default(false)
  nominationStartDate DateTime?
  nominationEndDate   DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Nomination {
  id          String   @id @default(cuid()) @map("_id")
  nominatorId String?
  nomineeId   String? // Only one nominee per nomination
  year        Int      @default(2025) // Add year tracking
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    String
  reason      String
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED

  nominator Member? @relation("Nominator", fields: [nominatorId], references: [id])
  nominee   Member? @relation("Nominee", fields: [nomineeId], references: [id])

  @@unique([nominatorId, category, year]) // Ensure one nomination per category per year
  @@index([nominatorId])
  @@index([nomineeId])
}

model PDFFile {
  id          String   @id @default(cuid()) @map("_id")
  name        String
  description String?
  author      String?
  fileUrl     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Luminance {
  id         String   @id @default(cuid()) @map("_id")
  name       String   @unique
  fileUrl    String
  winnerYear String?
  isCurrent  Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model LuminanceToggle {
  id         String    @id @default(cuid()) @map("_id")
  createdAt  DateTime  @default(now())
  endedAt    DateTime? @updatedAt
  hasStarted Boolean   @default(false)
}

model VotingSettings {
  id              String    @id @default(cuid()) @map("_id")
  year            Int       @unique
  isVotingOpen    Boolean   @default(false)
  votingStartDate DateTime?
  votingEndDate   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Voter {
  id        String   @id @default(cuid()) @map("_id")
  email     String
  name      String
  year      Int
  createdAt DateTime @default(now())
  votes     Vote[]

  @@unique([email, year])
}

model Vote {
  id        String   @id @default(cuid()) @map("_id")
  voterId   String
  voter     Voter    @relation(fields: [voterId], references: [id])
  category  String // "intentionality", "inquiry", "impact"
  nomineeId String
  nominee   Member   @relation(fields: [nomineeId], references: [id])
  year      Int
  createdAt DateTime @default(now())

  @@unique([voterId, category, year])
}
